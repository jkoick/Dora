---
import config from '@/config/config.json';
import dateFormat from '@/lib/utils/dateFormat';
import { humanize, markdownify, plainify } from '@/lib/utils/textConverter';

interface Props {
  post: any;
  layout?: 'large' | 'horizontal' | 'boxed';
  collection?: string;
}

const {
  summary_length,
  blog_folder,
}: { summary_length: number; blog_folder: string } = config.settings;

const { post, layout, collection } = Astro.props;
const { title, categories } = post.data;
const folderPath = collection || blog_folder;
---

{
  layout === 'boxed' ? (
    <a
      href={`/${folderPath}/${post.id}/`}
      class="block group h-full focus:outline-none"
    >
      <article class="test-card bg-light hover:bg-light/90 p-5 md:p-8 relative h-full cursor-pointer">
        {title && (
          <h3
            class="text-base font-medium mb-3 text-h6 transition-colors duration-300 group-hover:text-primary"
            set:html={markdownify(title)}
          />
        )}

        <div class="absolute top-4 right-4 opacity-0 transition-all duration-300 group-hover:opacity-100 group-hover:translate-x-1">
          <svg
            width="20"
            height="20"
            viewBox="0 0 24 24"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
            class="text-primary"
          >
            <path
              d="M7 17L17 7M17 7H7M17 7V17"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
            />
          </svg>
        </div>
      </article>
    </a>
  ) : (
    <a
      href={`/${folderPath}/${post.id}/`}
      class="block group h-full focus:outline-none"
    >
      <article
        class={`test-card bg-light hover:bg-light/90 relative h-full cursor-pointer transition-all duration-500 ${
          layout === 'boxed' ? 'p-6' : 'p-5 md:p-8'
        } ${layout === 'large' ? 'mb-8' : 'mb-6'}`}
      >
        {categories && (
          <span class="mb-3 inline-block">
            {categories.map((category: string, index: number) => (
              <span class="text-xs uppercase text-primary/80 transition-colors duration-300 group-hover:text-primary">
                {humanize(category)}
                {index !== categories.length - 1 && (
                  <span class="text-text-dark/40 mx-1">Â·</span>
                )}
              </span>
            ))}
          </span>
        )}

        {title && (
          <h3
            class={`text-text-dark transition-colors duration-300 group-hover:text-primary mb-4 ${
              layout === 'large'
                ? 'text-2xl font-semibold'
                : 'text-lg font-medium'
            }`}
            set:html={markdownify(title)}
          />
        )}

        <div class="absolute top-4 right-4 opacity-0 transition-all duration-300 group-hover:opacity-100 group-hover:translate-x-1">
          <svg
            width="20"
            height="20"
            viewBox="0 0 24 24"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
            class="text-primary"
          >
            <path
              d="M7 17L17 7M17 7H7M17 7V17"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
            />
          </svg>
        </div>
      </article>
    </a>
  )
}
