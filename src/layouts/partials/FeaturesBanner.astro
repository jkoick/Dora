---
import UserImage from '@/components/UserImage.astro';
import DotTitle from '@/components/DotTitle.astro';
import { markdownify } from '@/lib/utils/textConverter';
import { getEntry } from 'astro:content';
import type { CollectionEntry } from 'astro:content';

const featuresBanner = (await getEntry(
  'services',
  '-index'
)) as CollectionEntry<'services'>;
const { banner } = featuresBanner.data;
---

{
  banner && banner.enable && (
    <section class="pb-20 2xl:pb-28">
      <div class="container bg-light">
        <div class="py-10 md:py-5 2xl:px-28">
          <div class="row items-center">
            <div class="lg:col-8">
              {banner.subtitle && (
                <div data-aos="fade-left-sm">
                  <DotTitle title={banner.subtitle} />
                </div>
              )}

              {banner.title && (
                <h1
                  class="mb-6"
                  data-aos="fade-left-sm"
                  data-aos-delay="100"
                  set:html={markdownify(banner.title)}
                />
              )}

              {banner.description && (
                <p
                  class="mb-8 text-justify"
                  data-aos="fade-left-sm"
                  data-aos-delay="150"
                  set:html={markdownify(banner.description)}
                />
              )}
            </div>
          </div>
        </div>
      </div>
    </section>
  )
}

<script>
  function circleAnimInit() {
    function animateProgress(): void {
      setTimeout(() => {
        const circle = document.getElementById('progress') as SVGElement | null;
        const progressCircle = document.getElementById(
          'progressCircle'
        ) as HTMLElement | null;

        if (!circle || !progressCircle) {
          return;
        }

        const progressAttr = progressCircle.getAttribute(
          'data-circle-progress'
        );
        if (progressAttr === null) {
          return;
        }

        const progress = parseFloat(progressAttr);
        const circumferenceAttr = circle.getAttribute('stroke-dasharray');
        if (circumferenceAttr === null) {
          return;
        }

        const circumference = parseFloat(circumferenceAttr);
        const offset = circumference - (progress / 100) * circumference;

        circle.style.transition = 'stroke-dashoffset 1s ease-in-out';
        circle.style.strokeDashoffset = offset.toString();
      }, 300); // 300ms delay
    }

    // Initial animation
    const circleSvg = document.getElementById('progress');
    if (circleSvg) {
      animateProgress();
    }
  }

  document.addEventListener('astro:page-load', circleAnimInit);
</script>
